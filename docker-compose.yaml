version: '1'

services:
  db:
    image: mysql
    container_name: mysql-docker
    restart: always
    volumes:
      - type: volume
        source: mysql-volume-django
        target: '/var/lib/mysql'
        read_only: false
    # this can connect to your .env file
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_DATABASE: ${DB_DATABASE}
    ports:
      - "${DB_PORT_PUBLIC}:3306"
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}", "-e", "SELECT 1"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 5s
    networks:
     - django-network

  django-redis:
    container_name: ${REDIS_HOST}
    image: redis:alpine
    restart: always
    volumes:
      - type: volume
        source: redis-volume-django
        target: '/data'
        read_only: false
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ["CMD","redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
     - django-network


  django:
    container_name: django-ecommerce
    build:
      context: .
      dockerfile: Dockerfile
    # makesure your pov is in linux env
    # django when app_label doesnt have migratuons folder, must initilaize with makemigration app_label
    # command: sh -c "python3 manage.py makemigrations --noinput && python3 manage.py makemigrations master notification order product store transaction user --noinput && python3 manage.py migrate --noinput &&  python3 manage.py loaddata master/seeder/master-all.json && python3 manage.py collectstatic --noinput && python3 manage.py runserver 0.0.0.0:${APP_PORT}"
    # command: ./docker-entrypoint.sh
    # command: sh -c "python3 manage.py makemigrations --noinput && python3 manage.py runserver 0.0.0.0:${APP_PORT}" # for debugging when startup fail. exec only can run when container active
    # command : sh -c "tail -f /dev/null" # to keep container life
    # command: sh -c "python3 manage.py makemigrations --noinput && python3 manage.py makemigrations master notification order product store transaction user --noinput && python3 manage.py migrate --noinput &&  python3 manage.py loaddata master/seeder/master-all.json && python3 manage.py collectstatic --noinput && python3 -m debugpy --listen 0.0.0.0:${DEBUG_PORT} manage.py runserver 0.0.0.0:${APP_PORT}"
    restart: on-failure
    # volumes:
    #   - .:/app # it will bind current path to docker
    volumes:
      - type: volume
        source: django-volume
        target: /app/django # be entrypoint path
        read_only: false
    ports:
      - "${APP_PORT}:${APP_PORT}"
      - "${DEBUG_PORT}:${DEBUG_PORT}"
    env_file:
      - .env
    depends_on:
      # - migration
      - db
      - django-redis
    environment:
      - "APP_PORT=${APP_PORT}"
    networks:
     - django-network

  django-debug:
    container_name: django-debug
    image: ffiuca/mycurl
    volumes:
      - type: volume
        source: django-volume
        target: /app/django
        read_only: false

volumes:
  mysql-volume-django:
    name: mysql-volume-django
  django-volume:
    name: django-volume
  redis-volume-django:
    name: redis-volume-django

networks:
  django-network:
    name: django-network
    driver: bridge
